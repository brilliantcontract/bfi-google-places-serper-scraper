package bc.bfi.google_places;

import java.io.IOException;
import java.nio.file.*;
import bc.bfi.google_places.scrapers.Config;
import bc.bfi.google_places.scrapers.Queries;
import bc.bfi.google_places.scrapers.google_places.GooglePlaceScraper;
import bc.bfi.google_places.scrapers.serpapi.SerpapiScraper;
import bc.bfi.google_places.scrapers.serper.Parser;
import bc.bfi.google_places.scrapers.serper.SerperScraper;
import java.awt.HeadlessException;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.*;
import java.util.List;
import bc.bfi.google_places.BannerPrinter;

public class Main extends javax.swing.JFrame {

    private Queries queries;
    private Config config;
    private final GooglePlaceScraper googlePlaceScraper = null;
    private final SerpapiScraper serpapiScraper = null;
    private SerperScraper serperScraper;

    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonStart = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaQueries = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldStartTime = new javax.swing.JTextField();
        jTextFieldFinishTime = new javax.swing.JTextField();
        jComboBoxScraper = new javax.swing.JComboBox<>();
        jTextFieldLanguage = new javax.swing.JTextField();
        jTextFieldLocation = new javax.swing.JTextField();
        jTextFieldCountry = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButtonLoadQueries = new javax.swing.JButton();
        jButtonLoadConfig = new javax.swing.JButton();
        jButtonRescrape = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Google places scraper");
        setResizable(false);

        jButtonStart.setText("Start");
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        jTextAreaQueries.setEditable(false);
        jTextAreaQueries.setColumns(20);
        jTextAreaQueries.setRows(5);
        jScrollPane1.setViewportView(jTextAreaQueries);

        jLabel1.setText("Start time");

        jLabel2.setText("Finish time");

        jTextFieldStartTime.setEditable(false);

        jTextFieldFinishTime.setEditable(false);

        jComboBoxScraper.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "serper.dev", "serpapi.com", "google.com/places" }));
        jComboBoxScraper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxScraperActionPerformed(evt);
            }
        });

        jTextFieldLanguage.setEditable(false);

        jTextFieldLocation.setEditable(false);

        jTextFieldCountry.setEditable(false);

        jLabel3.setText("Language");

        jLabel4.setText("Location");

        jLabel5.setText("Country");

        jButtonLoadQueries.setText("Load queries");
        jButtonLoadQueries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadQueriesActionPerformed(evt);
            }
        });

        jButtonLoadConfig.setText("Load config");
        jButtonLoadConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadConfigActionPerformed(evt);
            }
        });

        jButtonRescrape.setText("Re-scrape");
        jButtonRescrape.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRescrapeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonLoadQueries)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonLoadConfig)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRescrape)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxScraper, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3))
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldStartTime)
                            .addComponent(jTextFieldFinishTime)
                            .addComponent(jTextFieldLanguage)
                            .addComponent(jTextFieldLocation)
                            .addComponent(jTextFieldCountry))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonStart)
                    .addComponent(jComboBoxScraper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonLoadQueries)
                    .addComponent(jButtonLoadConfig)
                    .addComponent(jButtonRescrape))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldFinishTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        // Check if report.csv already exists
        Path reportPath = Paths.get("report-.csv");
        if (Files.exists(reportPath)) {
            JOptionPane.showMessageDialog(null, "Please remove the report-.csv file before start.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (Files.exists(Paths.get("initial-.csv"))) {
            JOptionPane.showMessageDialog(null, "Please remove the initial-.csv file before start.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (Files.exists(Paths.get("json"))) {
            JOptionPane.showMessageDialog(null, "Please remove the json directory before start.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (this.jTextAreaQueries.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Queries are not loaded.", "Warding", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Initialization
        this.queries = new Queries();
        this.config = new Config();
        this.serperScraper = new SerperScraper(this.queries, this.config);

        if (this.jTextFieldCountry.getText().isEmpty()
                || this.jTextFieldLanguage.getText().isEmpty()
                || this.jTextFieldLocation.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Config is not loaded.", "Warding", JOptionPane.WARNING_MESSAGE);
            return;
        }

        this.queries.loadQueries(this.jTextAreaQueries.getText());
        this.config.load(
                this.jTextFieldCountry.getText(),
                this.jTextFieldLanguage.getText(),
                this.jTextFieldLocation.getText()
        );

        System.out.println("SELECTED OPTION: " + this.jComboBoxScraper.getSelectedItem().toString());

        try {
            this.jTextFieldStartTime.setText(LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME));

            switch (this.jComboBoxScraper.getSelectedItem().toString().toUpperCase()) {
                case "SERPER.DEV":
                    serperScraper.startScrape();
                    break;

                case "SERPAPI.COM":
                    serpapiScraper.startScrape();
                    break;

                case "GOOGLE.COM/PLACES":
                    googlePlaceScraper.startScrape();
                    break;
            }

            new ReportGenerator().generate(Paths.get("initial-.csv"), reportPath);

            this.jTextFieldFinishTime.setText(LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME));
            BannerPrinter.printBanner();
            JOptionPane.showMessageDialog(null, "Scrape process completed successfully.", "Done", JOptionPane.INFORMATION_MESSAGE);
        } catch (RuntimeException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, "Scrape process failed", ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonStartActionPerformed

    private void jComboBoxScraperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxScraperActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxScraperActionPerformed

    private void jButtonLoadQueriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadQueriesActionPerformed
        SwingUtilities.invokeLater(() -> {
            JFileChooser fileChooser = new JFileChooser();

            FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files (*.txt)", "txt");
            fileChooser.setFileFilter(filter);

            int returnValue = fileChooser.showOpenDialog(null);

            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                try {
                    String content = new String(Files.readAllBytes(selectedFile.toPath()), StandardCharsets.UTF_8);
                    this.jTextAreaQueries.setText(content);
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, "Cannot read selected file.", ex);
                }
            }
        });
    }//GEN-LAST:event_jButtonLoadQueriesActionPerformed

    private void jButtonLoadConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadConfigActionPerformed
        SwingUtilities.invokeLater(() -> {
            JFileChooser fileChooser = new JFileChooser();

            FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files (*.txt)", "txt");
            fileChooser.setFileFilter(filter);

            int returnValue = fileChooser.showOpenDialog(null);

            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                try {
                    String content = new String(Files.readAllBytes(selectedFile.toPath()), StandardCharsets.UTF_8);
                    for (String line : content.split("\n")) {
                        if (line.startsWith("country=")) {
                            this.jTextFieldCountry.setText(line.replace("country=", "").trim());
                        }
                        if (line.startsWith("location=")) {
                            this.jTextFieldLocation.setText(line.replace("location=", "").trim());
                        }
                        if (line.startsWith("language=")) {
                            this.jTextFieldLanguage.setText(line.replace("language=", "").trim());
                        }
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, "Cannot read selected file.", ex);
                }
            }
        });
    }//GEN-LAST:event_jButtonLoadConfigActionPerformed

    private void jButtonRescrapeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRescrapeActionPerformed
        final Parser parser = new Parser();
        final CsvStorage csvStorage = new CsvStorage();

        Path dir = Paths.get("json");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {
            for (Path pathJson : stream) {

                System.out.println("Processed file: " + pathJson);
                String json = new String(Files.readAllBytes(pathJson), Charset.forName("UTF-8"));
                if (json.equals("<html><title>Error 502 (Bad Gateway)!</title></html>")) {
                    continue;
                }

                List<Place> places = parser.parse(json);
                csvStorage.append(places);
            }

            new ReportGenerator().generate(Paths.get("initial-.csv"), Paths.get("report-.csv"));
            System.out.println("Re-processing completed");
            try {
                JOptionPane.showMessageDialog(null, "Re-processing completed", "Done", JOptionPane.INFORMATION_MESSAGE);
            } catch (HeadlessException ex) {
                // ignore when running in headless environment
            }
        } catch (IOException | DirectoryIteratorException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonRescrapeActionPerformed

    public static void main(String args[]) {
        LoggerConfig.configure();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLoadConfig;
    private javax.swing.JButton jButtonLoadQueries;
    private javax.swing.JButton jButtonRescrape;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JComboBox<String> jComboBoxScraper;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaQueries;
    private javax.swing.JTextField jTextFieldCountry;
    private javax.swing.JTextField jTextFieldFinishTime;
    private javax.swing.JTextField jTextFieldLanguage;
    private javax.swing.JTextField jTextFieldLocation;
    private javax.swing.JTextField jTextFieldStartTime;
    // End of variables declaration//GEN-END:variables
}
